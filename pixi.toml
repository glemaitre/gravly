[project]
name = "gravly"
version = "1.0.0"
description = "Find your next gravel ride"
channels = ["conda-forge"]
platforms = ["osx-arm64", "osx-64", "linux-64"]

[dependencies]
python = "*"
nodejs = "*"
fastapi = "*"
uvicorn = "*"
gpxpy = "*"
python-multipart = "*"
sqlalchemy = "*"
asyncpg = "*"
boto3 = "*"
python-dotenv = "*"
pre-commit = "*"
postgresql = "*"
requests = "*"
httpx = "*"
werkzeug = "*"
pillow = "*"
polyline = "*"
# dependencies for stravalib available in conda-forge
arrow = "*"
pint = "*"
pytz = "*"
flexcache = "*"
flexparser = "*"
types-python-dateutil = "*"

[pypi-dependencies]
stravalib = "*"

[feature.dev.dependencies]
ipykernel = "*"
ipython = "*"
jupyterlab = "*"

[feature.lint.dependencies]
ruff = "*"       # Python linter and formatter
pre-commit = "*" # Git hooks framework

[feature.tests.dependencies]
pytest = "*"
pytest-cov = "*"
moto = "*"
requests-mock = "*"

[tasks.start-backend]
cmd = "bash -c 'source ../.env/strava && uvicorn src.main:app --reload --host 0.0.0.0 --port 8000'"
cwd = "backend"

[tasks.start-frontend]
cmd = "npm run dev"
cwd = "frontend"
depends-on = ["frontend-install"]

[tasks.frontend-install]
cmd = "npm install"
cwd = "frontend"

[tasks.frontend-build]
cmd = "npm run build"
cwd = "frontend"
depends-on = ["frontend-install"]

[feature.lint.tasks.install-pre-commit]
cmd = "pre-commit install"

[feature.lint.tasks.pre-commit]
cmd = "pre-commit run --all-files"

[feature.lint.tasks.pre-commit-update]
cmd = "pre-commit autoupdate"

[feature.lint.tasks.lint-backend]
cmd = "ruff check backend/src/ backend/tests/ --fix"

[feature.lint.tasks.lint-frontend]
cmd = "npm run lint"
cwd = "frontend"
depends-on = ["frontend-install"]

[feature.lint.tasks.format-backend]
cmd = "ruff format backend/src/ backend/tests/ "

[feature.lint.tasks.format-frontend]
cmd = "npm run format"
cwd = "frontend"
depends-on = ["frontend-install"]

[feature.lint.tasks.lint-all]
depends-on = ["lint-backend", "lint-frontend"]

[feature.lint.tasks.format-all]
depends-on = ["format-backend", "format-frontend"]

[feature.lint.tasks.type-check-frontend]
cmd = "npm run type-check"
cwd = "frontend"
depends-on = ["frontend-install"]

[feature.tests.tasks.test-backend]
cmd = "python -m pytest backend/tests/ -q --cov=backend/src --cov-report=term-missing --cov-report=xml:backend/coverage.xml"

[feature.tests.tasks.test-frontend]
cmd = "npm install --no-audit --no-fund && npm run test:cov -- --run"
cwd = "frontend"

# PostgreSQL database management tasks
[tasks.pg-init]
cmd = "initdb -D $PWD/postgres_data"

[tasks.pg-start]
cmd = "pg_ctl -D $PWD/postgres_data -l $PWD/postgres.log start"

[tasks.pg-stop]
cmd = "pg_ctl -D $PWD/postgres_data stop"

[tasks.pg-status]
cmd = "pg_ctl -D $PWD/postgres_data status"

[tasks.pg-create-db]
cmd = "bash -c 'source .env/database && createdb $DB_NAME'"

[tasks.pg-drop-db]
cmd = "bash -c 'source .env/database && dropdb $DB_NAME'"

[tasks.pg-erase]
cmd = "rm -rf $PWD/postgres_data && rm $PWD/postgres.log"

[tasks.pg-cleanup]
depends-on = ["pg-drop-db", "pg-stop", "pg-erase"]

[tasks.pg-setup]
depends-on = ["pg-init", "pg-start", "pg-create-db"]

[tasks.seed-auth-users]
cmd = "bash -c 'source .env/auth_users && python scripts/seed_auth_users.py'"

[environments]
dev = { features = ["dev", "tests", "lint"] }
