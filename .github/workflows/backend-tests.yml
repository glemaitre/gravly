name: Backend Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  backend-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pixi
        uses: prefix-dev/setup-pixi@v0.9.0
        with:
          activate-environment: true
          locked: true

      - name: Show pixi version
        run: pixi --version

      - name: Run lint
        run: pixi run -e dev lint-backend

      - name: Create environment file for CI
        run: |
          mkdir -p .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env/server
          echo "BACKEND_URL=${{ secrets.BACKEND_URL }}" >> .env/server
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env/database
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env/database
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env/database
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env/database
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env/database
          echo "STORAGE_TYPE=${{ secrets.STORAGE_TYPE }}" >> .env/storage
          echo "LOCAL_STORAGE_ROOT=${{ secrets.LOCAL_STORAGE_ROOT }}" >> .env/storage
          echo "LOCAL_STORAGE_BASE_URL=${{ secrets.LOCAL_STORAGE_BASE_URL }}" >> .env/storage
          echo "STRAVA_CLIENT_ID=${{ secrets.STRAVA_CLIENT_ID }}" >> .env/strava
          echo "STRAVA_CLIENT_SECRET=${{ secrets.STRAVA_CLIENT_SECRET }}" >> .env/strava
          echo "STRAVA_TOKENS_FILE_PATH=${{ secrets.STRAVA_TOKENS_FILE_PATH }}" >> .env/strava
          echo "THUNDERFOREST_API_KEY=${{ secrets.THUNDERFOREST_API_KEY }}" >> .env/thunderforest

      - name: Setup database
        run: pixi run pg-setup

      - name: Start backend
        run: pixi run start-backend &

      - name: Run backend tests with coverage
        run: |
          pixi run -e dev -- test-backend

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true
          verbose: true

      - name: Upload coverage summary
        if: always()
        run: |
          echo "Coverage summary:" >> $GITHUB_STEP_SUMMARY
          pixi run -e dev -- test-backend | sed -n '/^=============================== tests coverage/,/^[0-9].*passed/p' >> $GITHUB_STEP_SUMMARY

      - name: Stop backend
        run: |
          # Kill any process running on port 8000 (backend server)
          lsof -ti:8000 | xargs -r kill -9
        if: always()

      - name: Cleanup database
        run: pixi run pg-cleanup
